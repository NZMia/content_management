name: CI/CD Pipeline

on:
  push:
    branches:
      - 'week_*'  
      - main     
    tags:
      - 'v*'     
  pull_request:
    branches:
      - main      
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run format check
        run: npm run format

      - name: Run unit test
        run: npm run test

      - name: Check commit message
        uses: wagoid/commitlint-github-action@v6
        with:
          config: 'commitlint.config.cjs'

      - name: Create success file
        if: ${{ success() }}
        run: echo "CI passed" > ci-success.txt

      - name: Upload CI success artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ci-success
          path: ./ci-success.txt

  deploy-preview:
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/week_') || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Download CI success artifact
        uses: actions/download-artifact@v4
        with:
          name: ci-success
      - name: Check CI success
        run: test -f ci-success.txt
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to Vercel (Preview)
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') 
    steps:
      - uses: actions/checkout@v4
      - name: Ensure Deployment is on Main Branch
        run: |
          DEFAULT_BRANCH="main"
          TAG_COMMIT=$(git rev-list -n 1 $GITHUB_REF)
          MAIN_COMMIT=$(git rev-list -n 1 origin/$DEFAULT_BRANCH)
          if [ "$TAG_COMMIT" != "$MAIN_COMMIT" ]; then
            echo "The tag is not on the latest commit of the main branch."
            exit 1
          fi
          
      - name: Download CI success artifact
        uses: actions/download-artifact@v4
        with:
          name: ci-success
      - name: Check CI success
        run: test -f ci-success.txt
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to Vercel (Production)
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  create-release:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          gh release create $TAG_NAME \
            --title "Release $TAG_NAME" \
            --notes "Release notes for version $TAG_NAME" \
            --generate-notes