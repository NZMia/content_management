name: CI/CD Workflow

on:
  push:
    branches: 
      - 'main'
      - 'week_*'
  pull_request:
    branches: 
      - 'main'
      - 'week_*'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run format check
        run: npm run format
      
      - name: Run unit test
        run: npm run test

      - name: Check commit message
        uses: wagoid/commitlint-github-action@v6
        with:
          config: 'commitlint.config.cjs'

      - name: Create success file
        if: ${{ success() }}
        run: echo "CI passed" > ci-success.txt

      - name: Upload CI success artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: ci-success
          path: ./ci-success.txt 

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Set environment
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
          else
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
          fi

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${VERCEL_ENV} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: |
          if [[ "${VERCEL_ENV}" == "production" ]]; then
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --prod
          else
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ github.ref == 'refs/heads/main' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false