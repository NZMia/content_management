name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - '*'  # This will trigger the workflow for any tag push, new or existing
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test

  deploy-preview:
    name: Deploy Preview
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview deployed to: $DEPLOYMENT_URL"

  deploy-production:
    name: Deploy Production
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "Unique deployment URL: $DEPLOYMENT_URL"
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

      - name: Get Production Domain
        run: |
          PROJECT_INFO=$(vercel project ls --token=${{ secrets.VERCEL_TOKEN }})
          echo "Project Info:"
          echo "$PROJECT_INFO"
          
          PROJECT_NAME=$(echo "$PROJECT_INFO" | awk '/content-management/ {print $1}')
          if [ -n "$PROJECT_NAME" ]; then
            PROD_DOMAIN="${PROJECT_NAME}-production.vercel.app"
            echo "Production domain: https://$PROD_DOMAIN"
            echo "PROD_DOMAIN=$PROD_DOMAIN" >> $GITHUB_ENV
          else
            echo "Unable to determine project name"
            echo "PROD_DOMAIN=content-management-production.vercel.app" >> $GITHUB_ENV
          fi

      - name: Verify Deployment
        run: |
          echo "Unique deployment URL: $DEPLOYMENT_URL"
          echo "Production domain: https://$PROD_DOMAIN"
          if curl -s -o /dev/null -w "%{http_code}" "https://$PROD_DOMAIN" | grep -q "200"; then
            echo "Deployment successful and accessible"
          else
            echo "Warning: Deployment may not be accessible"
          fi

      - name: Output Vercel Project Info
        run: |
          echo "Vercel Project Information:"
          vercel project ls --token=${{ secrets.VERCEL_TOKEN }}
