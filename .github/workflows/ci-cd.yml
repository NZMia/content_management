name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - '*'  # This will trigger the workflow for any tag push, new or existing
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test

  deploy-preview:
    name: Deploy Preview
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Preview deployed to: $DEPLOYMENT_URL"

  deploy-production:
    name: Deploy Production
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "Production deployed to: $DEPLOYMENT_URL"
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
      - name: Set alias for production
        run: |
          vercel alias set $DEPLOYMENT_URL content-management-mia.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
          echo "Production alias set to: https://content-management-mia.vercel.app"
      - name: Output Vercel Project Info
        run: |
          echo "Vercel Project Information:"
          vercel project ls --token=${{ secrets.VERCEL_TOKEN }}
          echo "Vercel Aliases:"
          vercel alias ls --token=${{ secrets.VERCEL_TOKEN }}
      - name: Verify deployment
        run: |
          echo "Deployment URL: $DEPLOYMENT_URL"
          ALIAS_URL="https://content-management-mia.vercel.app"
          echo "Expected Alias URL: $ALIAS_URL"
          
          # Check if the alias is set correctly
          ALIAS_CHECK=$(vercel alias ls --token=${{ secrets.VERCEL_TOKEN }} | grep "$ALIAS_URL" || echo "")
          if [[ -z "$ALIAS_CHECK" ]]; then
            echo "Error: Alias $ALIAS_URL not found in project aliases"
            vercel alias ls --token=${{ secrets.VERCEL_TOKEN }}
            exit 1
          fi
          
          # Verify that the deployment URL is different from the alias URL
          if [[ "$DEPLOYMENT_URL" == "$ALIAS_URL" ]]; then
            echo "Error: Deployment URL is the same as the Alias URL"
            exit 1
          fi
          
          echo "Deployment verified successfully"
